package com.ghostcorp.kotlin.KotlinClasses

class Notes {

  // Normal class

  /*  In Kotlin, a normal class (also called a regular class)
   is a basic building block used to represent real-world entities
   in object-oriented programming.
   It is defined using the class keyword and can contain:

    Properties (variables)
    Methods (functions)
    Constructors (primary and secondary)
    Initializer blocks
    Nested classes, etc.*/


    // Data classes

/*
    In Kotlin, a data class is a special type of class designed to hold data. It automatically provides useful functions like:

    toString()
    equals()
    hashCode()
    copy()
    componentN() functions for destructuring
*/

    // Singleton (Object Declaration)

    /*In Kotlin, a singleton is a design pattern where a class has only one instance
    throughout the app's lifecycle. Kotlin makes this super easy using the object declaration.*/

    // data object

  /*  It gives you a singleton object with autogenerated functions like:
    toString()
    equals()
    hashCode()

    This is equivalent to a data class with a single instance (object) —
    perfect for things like default values, configuration, or roles.
    */

    // enum
    /*In Kotlin, an enum class (short for enumeration class) is
    used to represent a fixed set of constants. Each constant in an
    enum is an object, and an enum class can have properties, methods,
    and even implement interfaces.
*/

    //Sealed Class

    /*In Kotlin, a sealed class is a special kind of class used to represent restricted class hierarchies.
    It allows you to define a type that can be one of a limited number of subclasses, known at compile time.*/

    // Abstract Class

   /* In Kotlin, an abstract class is a class that cannot be instantiated directly and is meant to
    be inherited by other classes. It can have abstract members (without implementation)
    and non-abstract members (with implementation).*/

    // open class

   // An open class is a class that can be subclassed.

    // anonymous class

   /* In Kotlin, an anonymous class is a class without a name, created on the
    fly using an object expression. It is used to create an object of a
    class (often an interface or abstract class) without declaring a separate
    class explicitly.*/

    // value class

   /* In Kotlin, a value class is a lightweight, inlineable wrapper around a
    single value. It is defined using the @JvmInline annotation and the value
    class keyword.

    Value classes are used to improve performance by avoiding object allocation
    at runtime while still providing type safety.*/

    // annotation class

    /*In Kotlin, an annotation class is a way to attach metadata to code — like
    classes, functions, properties, etc.
    You define it using the annotation class keyword.*/

/*    Annotations don’t do anything by themselves. Instead, they are
    used by tools, compilers, or libraries to alter behavior, generate code,
    or apply certain rules.*/

    // inner class

   /* In Kotlin, an inner class is a non-static nested class that has access to
    the members (including private ones) of its outer class.*/






}